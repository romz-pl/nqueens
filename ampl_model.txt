
# New MP Library-based, as well as Constraint Programming drivers, accept alldiff directly:
param n integer > 0;

var Row {1..n} integer >= 1 <= n;

s.t. row_attacks:
    alldiff ({j in 1..n} Row[j]);

s.t. diag_attacks:
    alldiff ({j in 1..n} Row[j] + j);

s.t. rdiag_attacks:
    alldiff ({j in 1..n} Row[j] - j);


# A reformulated model for older MIP drivers:
# param n integer > 0;
# # X[i,j] is one if there is a queen at (i,j); else zero
# var X{1..n, 1..n} binary;
#
#
#s.t. column_attacks {j in 1..n}:
#    sum {i in 1..n} X[i,j] = 1;
#
#s.t. row_attacks {i in 1..n}:
#    sum {j in 1..n} X[i,j] = 1;
#
#s.t. diagonal1_attacks {k in 2..2*n}:
#    sum {i in 1..n, j in 1..n: i+j=k} X[i,j] <= 1;
#
#s.t. diagonal2_attacks {k in -(n-1)..(n-1)}:
#    sum {i in 1..n, j in 1..n: i-j=k} X[i,j] <= 1;
